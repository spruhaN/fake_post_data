import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np

def database_connection_url():
    dotenv.load_dotenv()
    DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

num_users = 200000
fake = Faker()
workouts = ['bicep_curl', 'tricep_pushdown', 'lat_pulldown', 'wrist_curl', 'cable_curl', 'skull_crusher', 'preacher_curl', 'cable_row', 'pull_up', 'bent_over_dumbell_row', 'hammer_curl', 'pec_fly', 'bench_press', 'deadlift', 'overhead_press', 'chest_press', 'rear_delt_flys', 'lat_raises', 'shoulder_press', 'squat', 'bulgarian_split_squat', 'leg_press', 'romanian_deadlift', 'hip_thrust', 'hamstring_curl', 'leg_extension', 'calf_raise', 'treadmill', 'sit-ups']

# create fake posters with fake names and birthdays
with engine.begin() as conn:
    # droppign and recreating the tables
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS exercises;
    DROP TABLE IF EXISTS goals;
    DROP TABLE IF EXISTS ingredient;
    DROP TABLE IF EXISTS meal;
    DROP TABLE IF EXISTS muscle_groups;
    DROP TABLE IF EXISTS user_workouts;
    DROP TABLE IF EXISTS users;

    CREATE TABLE users (
        user_id bigint generated by default as identity,
        name character varying null,
        weight bigint null,
        height bigint null,
        constraint customer_pkey primary key (user_id)
    );
    
    CREATE TABLE muscle_groups (
        muscle_group_id bigint generated by default as identity,
        type character varying null,
        "group" character varying null,
        constraint muscle_groups_pkey primary key (muscle_group_id)
    );

    CREATE TABLE exercises (
        id bigint generated by default as identity,
        name text null,
        muscle_group_id bigint null,
        constraint exercises_pkey primary key (id),
        constraint exercises_muscle_group_id_fkey foreign key (muscle_group_id) references muscle_groups (muscle_group_id)
    );
        
    CREATE TABLE goals (
        goal_id bigint generated by default as identity,
        type character varying null default ''::character varying,
        goal character varying null default ''::character varying,
        user_id bigint null,
        daily_calories bigint null default '0'::bigint,
        constraint goals_pkey primary key (goal_id),
        constraint goals_customer_id_key unique (user_id),
        constraint goals_customer_id_fkey foreign key (user_id) references users (user_id)
    );
    
    CREATE TABLE user_workouts (
        workout_id bigint generated by default as identity,
        exercise_id bigint not null,
        sets integer null default 0,
        reps integer null default 0,
        length integer null default 0,
        user_id bigint not null,
        time date not null default now(),
        constraint Workout_pkey primary key (workout_id),
        constraint customer_workouts_exercise_id_fkey foreign key (exercise_id) references exercises (id),
        constraint workout_customer_id_fkey foreign key (user_id) references users (user_id) on update cascade on delete cascade
    );
    
    CREATE TABLE meal (
        meal_id bigint generated by default as identity,
        time timestamp with time zone not null default now(),
        name character varying null,
        calories bigint null default '0'::bigint,
        ingredient_id bigint null,
        user_id bigint null,
        type text null,
        rating bigint null default '0'::bigint,
        constraint meal_pkey primary key (meal_id),
        constraint meal_customer_id_fkey foreign key (user_id) references users (user_id),
        constraint meal_ingredient_id_fkey foreign key (ingredient_id) references ingredient (ingredient_id),
        constraint meal_rating_check check (
            (rating >= 0) and (rating <= 5)
        )
    );
    
    CREATE TABLE ingredient (
        ingredient_id bigint generated by default as identity,
        name character varying null,
        constraint ingredient_pkey primary key (ingredient_id)
    );
    """))

    # adding muscle group daya
    conn.execute(sqlalchemy.text("""
    INSERT INTO muscle_groups (muscle_group_id, type, "group") VALUES 
        (2, 'back', 'lats'), (3, 'back', 'traps'), (8, 'arms', 'tricep'),
        (1, 'arms', 'bicep'), (9, 'arms', 'forearm'), (4, 'back', 'rhomboid'),
        (10, 'front', 'chest'), (11, 'front', 'abs'), (12, 'back', 'lower_back'),
        (14, 'legs', 'quads'), (13, 'legs', 'hamstrings'), (15, 'legs', 'glutes'),
        (16, 'legs', 'calves'), (7, 'arms', 'shoulders');
    """))

    # adding exercise data
    conn.execute(sqlalchemy.text("""
    INSERT INTO exercises (id, name, muscle_group_id) VALUES 
        (3, 'bicep_curl', 1), (2, 'tricep_pushdown', 8), (1, 'lat_pulldown', 2),
        (4, 'wrist_curl', 9), (5, 'cable_curl', 1), (6, 'skull_crusher', 8),
        (7, 'preacher_curl', 1), (8, 'cable_row', 3), (9, 'pull_up', 2),
        (10, 'bent_over_dumbell_row', 2), (11, 'hammer_curl', 1), (12, 'pec_fly', 10),
        (14, 'bench_press', 10), (15, 'deadlift', 15), (16, 'overhead_press', 7),
        (13, 'chest_press', 10), (17, 'rear_delt_flys', 7), (18, 'lat_raises', 7),
        (19, 'shoulder_press', 7), (20, 'squat', 14), (21, 'bulgarian_split_squat', 14),
        (22, 'leg_press', 14), (23, 'romanian_deadlift', 13), (24, 'hip_thrust', 15),
        (25, 'hamstring_curl', 13), (26, 'leg_extension', 14), (27, 'calf_raise', 16),
        (28, 'treadmill', 15), (29, 'sit-ups', 11);
    """))

    # creating fake users
    print("Creating fake users...")
    for i in range(num_users):
        if i % 1000 == 0: # every 1000 users
            print(f"Processing user {i}")

        # generates fake user data (name, weight, height)
        name = fake.name()
        weight = np.random.randint(100, 300)
        height = np.random.randint(35, 84)

        # add user amd get id back (ignore the f strings :'))
        result = conn.execute(sqlalchemy.text(f"""
            INSERT INTO users (name, weight, height) VALUES ('{name}', {weight}, {height}) RETURNING user_id;
        """))
        user_id = result.fetchone()[0]

        # creates fake goal
        goal = fake.sentence(nb_words=4)
        daily_calories = np.random.randint(1500, 3500)

        # adds goal
        conn.execute(sqlalchemy.text(f"""
            INSERT INTO goals (type, goal, user_id, daily_calories) VALUES ('{fake.sentence(nb_words=1)}', '{goal}', {user_id}, {daily_calories});
        """))

        # adds 1-n workouts
        upper_workout_num = 7
        num_workouts = np.random.randint(1, upper_workout_num)
        for _ in range(num_workouts):
            # generates individual workout data
            exercise = fake.random_element(elements=workouts)
            sets = np.random.randint(1, 5)
            reps = np.random.randint(5, 15)
            length = np.random.randint(20, 90)

            # gets workout id
            exercise_id = conn.execute(sqlalchemy.text(f"SELECT id FROM exercises WHERE name='{exercise}'")).fetchone()[0]
            # inserts user's workout
            conn.execute(sqlalchemy.text(f"""
                INSERT INTO user_workouts (exercise_id, sets, reps, length, user_id) VALUES ({exercise_id}, {sets}, {reps}, {length}, {user_id});
            """))

        # adds 1-n meals
        upper_meal_num = 4
        num_meals = np.random.randint(1, upper_meal_num)

        for _ in range(num_meals):
            # generates meal info
            # lmao idek what this might gen
            meal_name = fake.sentence(nb_words=1)
            calories = np.random.randint(150, 1000)

            # adds meal
            conn.execute(sqlalchemy.text(f"""
                INSERT INTO meal (name, calories, user_id) VALUES ('{meal_name}', {calories}, {user_id});
            """))
    